//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace For_AIS_2__winforms_.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskRecord", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class TaskRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string discriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string groupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string subjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string surnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string task_nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string discription {
            get {
                return this.discriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.discriptionField, value) != true)) {
                    this.discriptionField = value;
                    this.RaisePropertyChanged("discription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string group {
            get {
                return this.groupField;
            }
            set {
                if ((object.ReferenceEquals(this.groupField, value) != true)) {
                    this.groupField = value;
                    this.RaisePropertyChanged("group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string subject {
            get {
                return this.subjectField;
            }
            set {
                if ((object.ReferenceEquals(this.subjectField, value) != true)) {
                    this.subjectField = value;
                    this.RaisePropertyChanged("subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string surname {
            get {
                return this.surnameField;
            }
            set {
                if ((object.ReferenceEquals(this.surnameField, value) != true)) {
                    this.surnameField = value;
                    this.RaisePropertyChanged("surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string task_name {
            get {
                return this.task_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.task_nameField, value) != true)) {
                    this.task_nameField = value;
                    this.RaisePropertyChanged("task_name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTasks", ReplyAction="http://tempuri.org/IService/GetTasksResponse")]
        For_AIS_2__winforms_.ServiceReference1.TaskRecord[] GetTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTasks", ReplyAction="http://tempuri.org/IService/GetTasksResponse")]
        System.Threading.Tasks.Task<For_AIS_2__winforms_.ServiceReference1.TaskRecord[]> GetTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddTask", ReplyAction="http://tempuri.org/IService/AddTaskResponse")]
        bool AddTask(For_AIS_2__winforms_.ServiceReference1.TaskRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddTask", ReplyAction="http://tempuri.org/IService/AddTaskResponse")]
        System.Threading.Tasks.Task<bool> AddTaskAsync(For_AIS_2__winforms_.ServiceReference1.TaskRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditTask", ReplyAction="http://tempuri.org/IService/EditTaskResponse")]
        bool EditTask(For_AIS_2__winforms_.ServiceReference1.TaskRecord task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditTask", ReplyAction="http://tempuri.org/IService/EditTaskResponse")]
        System.Threading.Tasks.Task<bool> EditTaskAsync(For_AIS_2__winforms_.ServiceReference1.TaskRecord task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteTask", ReplyAction="http://tempuri.org/IService/DeleteTaskResponse")]
        bool DeleteTask(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteTask", ReplyAction="http://tempuri.org/IService/DeleteTaskResponse")]
        System.Threading.Tasks.Task<bool> DeleteTaskAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Search", ReplyAction="http://tempuri.org/IService/SearchResponse")]
        For_AIS_2__winforms_.ServiceReference1.TaskRecord[] Search(For_AIS_2__winforms_.ServiceReference1.TaskRecord task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Search", ReplyAction="http://tempuri.org/IService/SearchResponse")]
        System.Threading.Tasks.Task<For_AIS_2__winforms_.ServiceReference1.TaskRecord[]> SearchAsync(For_AIS_2__winforms_.ServiceReference1.TaskRecord task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchLastID", ReplyAction="http://tempuri.org/IService/SearchLastIDResponse")]
        string SearchLastID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchLastID", ReplyAction="http://tempuri.org/IService/SearchLastIDResponse")]
        System.Threading.Tasks.Task<string> SearchLastIDAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : For_AIS_2__winforms_.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<For_AIS_2__winforms_.ServiceReference1.IService>, For_AIS_2__winforms_.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public For_AIS_2__winforms_.ServiceReference1.TaskRecord[] GetTasks() {
            return base.Channel.GetTasks();
        }
        
        public System.Threading.Tasks.Task<For_AIS_2__winforms_.ServiceReference1.TaskRecord[]> GetTasksAsync() {
            return base.Channel.GetTasksAsync();
        }
        
        public bool AddTask(For_AIS_2__winforms_.ServiceReference1.TaskRecord record) {
            return base.Channel.AddTask(record);
        }
        
        public System.Threading.Tasks.Task<bool> AddTaskAsync(For_AIS_2__winforms_.ServiceReference1.TaskRecord record) {
            return base.Channel.AddTaskAsync(record);
        }
        
        public bool EditTask(For_AIS_2__winforms_.ServiceReference1.TaskRecord task) {
            return base.Channel.EditTask(task);
        }
        
        public System.Threading.Tasks.Task<bool> EditTaskAsync(For_AIS_2__winforms_.ServiceReference1.TaskRecord task) {
            return base.Channel.EditTaskAsync(task);
        }
        
        public bool DeleteTask(string id) {
            return base.Channel.DeleteTask(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTaskAsync(string id) {
            return base.Channel.DeleteTaskAsync(id);
        }
        
        public For_AIS_2__winforms_.ServiceReference1.TaskRecord[] Search(For_AIS_2__winforms_.ServiceReference1.TaskRecord task) {
            return base.Channel.Search(task);
        }
        
        public System.Threading.Tasks.Task<For_AIS_2__winforms_.ServiceReference1.TaskRecord[]> SearchAsync(For_AIS_2__winforms_.ServiceReference1.TaskRecord task) {
            return base.Channel.SearchAsync(task);
        }
        
        public string SearchLastID() {
            return base.Channel.SearchLastID();
        }
        
        public System.Threading.Tasks.Task<string> SearchLastIDAsync() {
            return base.Channel.SearchLastIDAsync();
        }
    }
}
