//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NotesClient.NotesServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteRecord", Namespace="http://schemas.datacontract.org/2004/07/NotesService")]
    [System.SerializableAttribute()]
    public partial class NoteRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool doneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string recordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool done {
            get {
                return this.doneField;
            }
            set {
                if ((this.doneField.Equals(value) != true)) {
                    this.doneField = value;
                    this.RaisePropertyChanged("done");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string record {
            get {
                return this.recordField;
            }
            set {
                if ((object.ReferenceEquals(this.recordField, value) != true)) {
                    this.recordField = value;
                    this.RaisePropertyChanged("record");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotesServiceReference.INotesService")]
    public interface INotesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNotes", ReplyAction="http://tempuri.org/INotesService/GetNotesResponse")]
        NotesClient.NotesServiceReference.NoteRecord[] GetNotes(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNotes", ReplyAction="http://tempuri.org/INotesService/GetNotesResponse")]
        System.Threading.Tasks.Task<NotesClient.NotesServiceReference.NoteRecord[]> GetNotesAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/AddNote", ReplyAction="http://tempuri.org/INotesService/AddNoteResponse")]
        bool AddNote(string user, NotesClient.NotesServiceReference.NoteRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/AddNote", ReplyAction="http://tempuri.org/INotesService/AddNoteResponse")]
        System.Threading.Tasks.Task<bool> AddNoteAsync(string user, NotesClient.NotesServiceReference.NoteRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/SetDone", ReplyAction="http://tempuri.org/INotesService/SetDoneResponse")]
        bool SetDone(string user, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/SetDone", ReplyAction="http://tempuri.org/INotesService/SetDoneResponse")]
        System.Threading.Tasks.Task<bool> SetDoneAsync(string user, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/DeleteNote", ReplyAction="http://tempuri.org/INotesService/DeleteNoteResponse")]
        bool DeleteNote(string user, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/DeleteNote", ReplyAction="http://tempuri.org/INotesService/DeleteNoteResponse")]
        System.Threading.Tasks.Task<bool> DeleteNoteAsync(string user, string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotesServiceChannel : NotesClient.NotesServiceReference.INotesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotesServiceClient : System.ServiceModel.ClientBase<NotesClient.NotesServiceReference.INotesService>, NotesClient.NotesServiceReference.INotesService {
        
        public NotesServiceClient() {
        }
        
        public NotesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NotesClient.NotesServiceReference.NoteRecord[] GetNotes(string user) {
            return base.Channel.GetNotes(user);
        }
        
        public System.Threading.Tasks.Task<NotesClient.NotesServiceReference.NoteRecord[]> GetNotesAsync(string user) {
            return base.Channel.GetNotesAsync(user);
        }
        
        public bool AddNote(string user, NotesClient.NotesServiceReference.NoteRecord record) {
            return base.Channel.AddNote(user, record);
        }
        
        public System.Threading.Tasks.Task<bool> AddNoteAsync(string user, NotesClient.NotesServiceReference.NoteRecord record) {
            return base.Channel.AddNoteAsync(user, record);
        }
        
        public bool SetDone(string user, string id) {
            return base.Channel.SetDone(user, id);
        }
        
        public System.Threading.Tasks.Task<bool> SetDoneAsync(string user, string id) {
            return base.Channel.SetDoneAsync(user, id);
        }
        
        public bool DeleteNote(string user, string id) {
            return base.Channel.DeleteNote(user, id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteNoteAsync(string user, string id) {
            return base.Channel.DeleteNoteAsync(user, id);
        }
    }
}
